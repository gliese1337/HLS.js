/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const AESDecryptor = (function(){
  'use strict';

  function workerFn(){
    //Round Constant used for the Key Expansion [2^(r-1) in GF(2^8)] [§5.2]
    const Rcon = new Uint8Array([0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36]);

    const sBox = new Uint8Array([ //§5.1.1
      0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
      0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
      0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
      0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
      0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
      0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
      0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
      0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
      0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
      0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
      0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
      0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
      0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
      0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
      0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
      0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
    ]);

    const sBoxI = new Uint8Array([ //§5.3.2
      0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
      0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
      0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
      0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
      0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
      0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
      0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
      0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
      0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
      0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
      0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
      0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
      0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
      0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
      0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
      0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
    ]);

    //Lookup tables for fast Finite Field Multiplication
    const mul2 = new Uint8Array([
      0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
      0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
      0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
      0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
      0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
      0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
      0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
      0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
      0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
      0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
      0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
      0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
      0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
      0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
      0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
      0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
    ]);

    const mul4 = new Uint8Array([
      0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c,
      0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c,
      0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc,
      0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc,
      0x1b,0x1f,0x13,0x17,0x0b,0x0f,0x03,0x07,0x3b,0x3f,0x33,0x37,0x2b,0x2f,0x23,0x27,
      0x5b,0x5f,0x53,0x57,0x4b,0x4f,0x43,0x47,0x7b,0x7f,0x73,0x77,0x6b,0x6f,0x63,0x67,
      0x9b,0x9f,0x93,0x97,0x8b,0x8f,0x83,0x87,0xbb,0xbf,0xb3,0xb7,0xab,0xaf,0xa3,0xa7,
      0xdb,0xdf,0xd3,0xd7,0xcb,0xcf,0xc3,0xc7,0xfb,0xff,0xf3,0xf7,0xeb,0xef,0xe3,0xe7,
      0x36,0x32,0x3e,0x3a,0x26,0x22,0x2e,0x2a,0x16,0x12,0x1e,0x1a,0x06,0x02,0x0e,0x0a,
      0x76,0x72,0x7e,0x7a,0x66,0x62,0x6e,0x6a,0x56,0x52,0x5e,0x5a,0x46,0x42,0x4e,0x4a,
      0xb6,0xb2,0xbe,0xba,0xa6,0xa2,0xae,0xaa,0x96,0x92,0x9e,0x9a,0x86,0x82,0x8e,0x8a,
      0xf6,0xf2,0xfe,0xfa,0xe6,0xe2,0xee,0xea,0xd6,0xd2,0xde,0xda,0xc6,0xc2,0xce,0xca,
      0x2d,0x29,0x25,0x21,0x3d,0x39,0x35,0x31,0x0d,0x09,0x05,0x01,0x1d,0x19,0x15,0x11,
      0x6d,0x69,0x65,0x61,0x7d,0x79,0x75,0x71,0x4d,0x49,0x45,0x41,0x5d,0x59,0x55,0x51,
      0xad,0xa9,0xa5,0xa1,0xbd,0xb9,0xb5,0xb1,0x8d,0x89,0x85,0x81,0x9d,0x99,0x95,0x91,
      0xed,0xe9,0xe5,0xe1,0xfd,0xf9,0xf5,0xf1,0xcd,0xc9,0xc5,0xc1,0xdd,0xd9,0xd5,0xd1
    ]);

    const mul9 = new Uint8Array([
      0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
      0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
      0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
      0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
      0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
      0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
      0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
      0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
      0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
      0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
      0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
      0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
      0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
      0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
      0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
      0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
    ]);
    
    //Shift row r right by r bytes & apply inverse SBox [§5.3.1], [§5.3.2]
    function InvSubShift(bytes){
      let t1, t2;
      //First Row
      bytes[0] = sBoxI[bytes[0]];
      bytes[1] = sBoxI[bytes[1]];
      bytes[2] = sBoxI[bytes[2]];
      bytes[3] = sBoxI[bytes[3]];
      //Second Row
      t1 = bytes[7];
      bytes[7] = sBoxI[bytes[6]];
      bytes[6] = sBoxI[bytes[5]];
      bytes[5] = sBoxI[bytes[4]];
      bytes[4] = sBoxI[t1];
      //Third Row
      t1 = bytes[8];
      t2 = bytes[9];
      bytes[8] = sBoxI[bytes[10]];
      bytes[9] = sBoxI[bytes[11]];
      bytes[10] = sBoxI[t1];
      bytes[11] = sBoxI[t2];
      //Fourth Row
      t1 = bytes[12];
      bytes[12] = sBoxI[bytes[13]];
      bytes[13] = sBoxI[bytes[14]];
      bytes[14] = sBoxI[bytes[15]];
      bytes[15] = sBoxI[t1];
    }

    //Decombine bytes of each col of state S [§5.3.3]
    function InvMixColumns(s) {
      //Simplified matrix multiplication equations give ~45% speedup
      //See http://www.wseas.us/e-library/conferences/2009/moscow/AIC/AIC44.pdf
      const [s0, s1, s2, s3] = s;
      for(let c = 0; c < 4; c++){
        const t0 = s0[c];
        const t1 = s1[c];
        const t2 = s2[c];
        const t3 = s3[c];

        const t01 = t0 ^ t1;
        const t12 = t1 ^ t2;
        const t23 = t2 ^ t3;
        const t30 = t3 ^ t0;

        const t02 = mul4[t0 ^ t2];
        const t13 = mul4[t1 ^ t3];
        const t = mul9[t01 ^ t23];

        s0[c] = t ^ t0 ^ t02 ^ mul2[t01];
        s1[c] = t ^ t1 ^ t13 ^ mul2[t12];
        s2[c] = t ^ t2 ^ t02 ^ mul2[t23];
        s3[c] = t ^ t3 ^ t13 ^ mul2[t30];
      }
    }

    //XOR Round Key into state [§5.1.4]
    function AddRoundKey(words, ks, i){
      for(let j = 0; j < 4; j++){ words[j] ^= ks[i+j]; }
    }

    /**
     * Perform key expansion to generate a key schedule from a cipher key [§5.2].
     * key - Cipher key as 16-byte array.
     * return expanded key schedule as a 44-word array.
     */

    const bytes = new Uint8Array(176);
    const words = new Uint32Array(bytes.buffer);

    //Divide into bytes into words for simplicity
    const w = [];
    for (let i = 0; i < 176; i += 4) { w.push(bytes.subarray(i, i + 4)); }

    function keyExpansion(key) {
        //Initialize with cipher key
        bytes.set(key);
        let wi = w[3];

        //Expand the key into the remainder of the schedule
        for (let i = 4; i < 44; i++) {
          const wl = wi;
          const w4 = w[i-4];
          wi = w[i];
          if (i % 4 == 0) { //Each Nk'th word has an extra transformation
            wi[0] = w4[0] ^ sBox[wl[1]] ^ Rcon[i/4];
            wi[1] = w4[1] ^ sBox[wl[2]];
            wi[2] = w4[2] ^ sBox[wl[3]];
            wi[3] = w4[3] ^ sBox[wl[0]];
          } else {
            words[i] = words[i-4] ^ words[i-1];
          }
        }

        //Pre-Transpose the key shedule in-place to simplify AddRoundKey
        for (let k = 0; k < 176; k += 16) {
          let io = k;
          for(let i = 0; i < 4; i++){
            for(let j = i; j < 16; j+=4){ bytes[k+j] = bytes[io++]; }
          }
        }

        return words;
    }


    /**
     * Transpose columns of input into rows of output.
     * input & output are byte arrays of length 16+io and 16+oo or greater.
     * oo & io are starting offsets into the output and input arrays.
     *
     * It doesn't make sense, but for whatever reason profiling shows that
     * writing MixColumns and ShiftRows to work on non-transposed data is
     * actually less efficient than taking the overhead of transposing blocks.
     */
    function TransposeBlock(output, oo, input, io){
      for(let i = 0; i < 4; i++){
        for(let j = i; j < 16; j+=4){ output[oo+j] = input[io++]; }
      }
    }


    //Re-usable storage space for the cipher state
    const stateBytes = new Uint8Array(16);
    const stateWords = new Uint32Array(stateBytes.buffer);
    const stateMatrix = [
      stateBytes.subarray(0, 4),
      stateBytes.subarray(4, 8),
      stateBytes.subarray(8, 12),
      stateBytes.subarray(12, 16),
    ];

    /**
     * AES Inverse Cipher function [§5.3]
     * input - input byte array with length >= io+16
     * io - starting offset in input
     * output - output byte array with length >= io+16
     * oo - starting offset in output
     * ks - Key schedule
     */
    function decipher(input, io, output, oo, ks){
        const i;
        TransposeBlock(stateBytes, 0, input, io);
        AddRoundKey(stateWords, ks, 40);

        for(i = 36; i >= 4; i-=4){
          InvSubShift(stateBytes);
          AddRoundKey(stateWords, ks, i);
          InvMixColumns(stateMatrix);
        }

        InvSubShift(stateBytes);
        AddRoundKey(stateWords, ks, 0);
        TransposeBlock(output, oo, stateBytes, 0);
    }

    /**
     * Cipher Block Chaining Decryption.
     * cipher - the ciphertext as a Uint8Array
     * key - cipher key as 16-byte array
     * iv - initialization vector as a Uint32Array
     * return plaintext as a byte array
     */

    //re-useable storage space
    const prev32 = new Uint32Array(4);
    const output = new Uint8Array(16);
    const output32 = new Uint32Array(output.buffer);

    function decryptCBC(cipher, ks, iv) {
        const wlen = cipher.length / 4;
        const cipher32 = new Uint32Array(cipher.buffer, cipher.byteOffset);

        //XOR remaining blocks with previous block ciphertext
        prev32.set(iv);
        for (let i = 0, k = 0; i < wlen; k += 16) {
          decipher(cipher, k, output, 0, ks);
          for(let j = 0; j < 4; j++, i++){
              output32[j] ^= prev32[j];
              prev32[j] = cipher32[i];
              cipher32[i] = output32[j]; // overwrite ciphertext with plaintext
          }
        }
    }

    const iv = new Uint32Array(4);
    const ks = keyExpansion(new Uint8Array(16));

    self.addEventListener('message', ({ data }) => {
        if(data.iv){ iv.set(data.iv); }
        if(data.key){ keyExpansion(data.key); }
        if(!data.cipher){ return; }

        //Decryption occurs in-place
        const buffer = data.cipher;
        const bytes = new Uint8Array(buffer, data.offset);
        decryptCBC(bytes, ks, iv);

        self.postMessage({
          plain: buffer,
          job: data.job,
          len: bytes.length - bytes[bytes.length - 1],
          offset: data.offset,
        }, [buffer]);
    }, false);
  }

  const blobURL = URL.createObjectURL(
    new Blob(
        ['(' + workerFn.toString() + ')();'],
        { type: "text/javascript" }
    )
  );

  function keys_differ(a, b) {
    for (let i = 0; i < 16; i++) {
        if(a[i] !== b[i]){ return true; }
    }
    return false;
  }

  function normalize_arrays(arr, type, len){
    if (arr instanceof type) return arr;
    if (arr instanceof ArrayBuffer) return new type(key, 0, len);
    if (typeof key === 'object' && key.buffer instanceof ArrayBuffer)
        return new type(key.buffer, key.byteOffset||0, len);

    return void 0;
  }

  return class AESDecryptor {
    constructor(args) {
      const worker = new Worker(blobURL);
      this.jobCount = 0;
      this.jobs = {};

      worker.addEventListener("message", ({ data }) => {
          const jobid = data.job;
          jobs[jobid](new Uint8Array(data.plain, data.offset, data.len));
          delete jobs[jobid];
      }, false);

      this.worker = worker;
      this.current_key = new Uint8Array(16);

      if(args){ this.config(args); }
    }
  
    decrypt(cipher) {
      return new Promise((resolve, reject) => {
        if(cipher.byteLength % 4 !== 0){
            throw new Error("Cipher text must be a multiple of the block size (16 bytes).");
        }
        this.worker.postMessage({
            job: job,
            offset: cipher.byteOffset,
            cipher: cipher.buffer
        }, [cipher.buffer]);
        this.jobs[this.jobCount++] = resolve;
      });
    }

    config({ key, iv }) {
      iv = normalize_arrays(iv, Uint32Array, 4);
      key = normalize_arrays(key, Uint8Array, 16);
      if (key) {
        if (keys_differ(key, this.current_key)) {
          this.current_key = key;
        } else {
          key = void 0; // don't trigger a key update if it wasn't actually updated
        }
      }

      if(key || iv){ this.worker.postMessage({key: key, iv: iv}); }
    }
  }
})();